//
// Created by 26513 on 2023/6/23.
//
// 数组, 就是一个集合, 里面存放了相同类型的数据元素
// 数组是由连续的内存位置组成的

// 一维数组
// 数组被放在一块连续的内存空间中, 数组中的每个元素都是相同的数据类型
// 定义方式:
// 1. 数据类型 数组名[数组长度]
// 2. 数据类型 数组名[数组长度] = {值1, 值2, ...}
// 3. 数据类型 数组名[] = {值1, 值2, ...}
// 可以通过下标访问数组中的元素

// 一维数组中的数组名的用途: 可以统计整个数组在内存中的长度, 可以获取数组在内存中的首地址

#include "iostream"
#include "string"

using namespace std;

int main() {
    // 数据类型 数组名[数组长度]
    int arr[5];
    arr[0] = 10;
    arr[1] = 20;
    arr[2] = 30;
    arr[3] = 40;
    arr[4] = 50;

    // 访问数据元素
    cout << arr[0] << endl;

    // 数据类型 数组名[数组长度] = {值1, 值2, ...}
    // 如果在初始化的时候没有全部填写完, 会用0来填补
    int arr2[5] = {10, 20, 30, 40, 50};
    cout << arr2[4] << endl;

    cout << "==========" << endl;
    // 遍历数组输出
    for (int a: arr2) {
        cout << a << endl;
    }

    // 数据类型 数组名[] = {值1, 值2, ...}
    // 定义数组的时候必须要有初始的长度
    int arr3[] = {90, 80, 70};
    cout << "==========" << endl;
    // 遍历数组输出
    for (int a: arr3) {
        cout << a << endl;
    }

    cout << "==========" << endl;
    // 统计数组在内存中的长度
    cout << sizeof(arr2)/ sizeof(arr2[0]) << endl;
    // 获取数组在内存中的首地址, 一般用16进制表示
    cout << arr2 << endl;

    system("pause");
    return 0;
}